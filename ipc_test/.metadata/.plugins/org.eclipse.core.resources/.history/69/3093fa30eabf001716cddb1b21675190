/*
 * client.c: Client program
 *           to demonstrate interprocess commnuication
 *           with POSIX message queues
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <iostream>
#include <mqueue.h>

#define SERVER_QUEUE_NAME   "/sp-example-server"
#define QUEUE_PERMISSIONS 0660
#define MAX_MESSAGES 10
#define MAX_MSG_SIZE 256
#define MSG_BUFFER_SIZE MAX_MSG_SIZE + 10

int main(int argc, char **argv) {
	char client_queue_name[64];
	mqd_t qd_server, qd_client;   // queue descriptors

	struct mq_attr attr_c, attr_s;

	std::string server = "/server";
	std::string name1 = "/client_1";
	std::string name2 = "/client_2";

	if ((qd_client = mq_open(name1.c_str(), O_RDWR | O_CREAT, 0664, 0)) == -1) {
		perror("Client: mq_open (client)");
		exit(1);
	}

	if ((qd_server = mq_open(name2.c_str(), O_RDWR | O_CREAT, 0664, 0)) == -1) {
		perror("Client: mq_open (server)");
		exit(1);
	}

	mq_getattr(qd_client, &attr_c);
	mq_getattr(qd_server, &attr_s);

	char in_buffer[MSG_BUFFER_SIZE];

	printf("Ask for a token (Press <ENTER>): ");

	char temp_buf[10];

	while (true) {
		// Default max message size is set to 8192 bytes, so we create a 9000 byte buffer
		char *buffer = new char[9000];
		unsigned int _prio = 1;
		memset(buffer, '\0', 9000);
		if (mq_receive(qd_client, buffer, 9000, &_prio) == -1) {
			std::cout << "Error reading message" << std::endl;
			exit(1);
		}
		std::cout << std::string(buffer) << std::endl;
		delete[] buffer;
	}

	if (mq_close(qd_client) == -1) {
		perror("Client: mq_close");
		exit(1);
	}

	if (mq_unlink(client_queue_name) == -1) {
		perror("Client: mq_unlink");
		exit(1);
	}
	printf("Client: bye\n");

	exit(0);
}
